[
  {
    "objectID": "blog/2022/hurdle-lognormal-gaussian-brms/index.html",
    "href": "blog/2022/hurdle-lognormal-gaussian-brms/index.html",
    "title": "Modeling outcomes with many zeros using Bayesian hurdle lognormal and Gaussian regression",
    "section": "",
    "text": "Introduction\nIn a research project I’ve been working on for several years now, we’re interested in the effect of anti-NGO legal crackdowns on various foreign aid-related outcomes: the amount of foreign aid a country receives and the proportion of that aid dedicated to contentious vs. non-contentious causes or issues. These outcome variables are easily measurable thanks to the AidData project, but they post a tricky methodological issue. The amount of foreign aid countries receive can both be huge (in the hundreds of millions or even billions of dollars), or completely zero. Moreover, the proportion of aid allocated to specific purposes is inherently bound between 0% and 100%, but can sometimes be exactly 0% or 100%. Using a statistical model that fits the distribution of these kinds of variables is important for modeling accuracy, but it’s a more complicated process than running a basic linear OLS regression with lm().\nIn a previous post, I wrote a guide to doing beta, zero-inflated beta, and zero-one-inflated beta regression for outcome variables that are bound between 0 and 1 and that can include 0 and/or 1. (That post was a side effect of working on this project on foreign aid and anti-NGO restrictions.)\nBeta regression (and its zero- and zero-one-inflated varieties) works really well with these kinds of outcome variables, and you can end up with richly defined models and well-fitting models. Zero-inflated beta regression doesn’t work on outcomes that aren’t limited to 0–1, though. For outcome variables that extend beyond 1, we can use hurdle models instead, which follow the same general approach as zero-inflated models. We define a mixture of models for two separate processes:\n\nA model that predicts if the outcome is zero or not zero\nIf the outcome is not zero, a model that predicts what the value of the outcome is\n\n\n\nThe Basics\nHurdle models do a great job at fitting the data well and providing accurate predictions. They’re a little unwieldy to work with though, since they involve so many different moving parts.\nThis post is a guide (mostly for future me) for how to create, manipulate, understand, analyze, and plot hurlde models in a Bayesian way using R and Stan (through brms).\nThroughout this post, we’ll use data from two datasets to explore a couple different questions:\n\nWhat happens to a country’s GDP per capita as its life expectancy increases? We’ll use data from the Gapminder Project (though the gapminder R package)\nWhat is the effect of bill length on body mass in Antarctic penguins? We’ll use data from the palmerpenguins R package."
  },
  {
    "objectID": "blog/2023/bibdesk-to-zotero-pandoc/index.html",
    "href": "blog/2023/bibdesk-to-zotero-pandoc/index.html",
    "title": "How to migrate from BibDesk to Zotero for pandoc-based writing",
    "section": "",
    "text": "When I started my first master’s degree program in 2008, I decided to stop using Word for all my academic writing and instead use plain text Markdown for everything. Markdown itself had been a thing for 4 years, and MultiMarkdown—a pandoc-like extension of Markdown that could handle BibTeX bibliographies—was brand new. I did all my writing for my courses and my thesis in Markdown and converted it all to PDF through LaTeX using MultiMarkdown. I didn’t know about pandoc yet, so I only ever converted to PDF, not HTML or Word.\nI stored all my bibliographic references in a tiny little references.bib BibTeX file that I managed with BibDesk. BibDesk is a wonderful and powerful program with an active developer community and it does all sorts of neat stuff like auto-filing PDFs, importing references from DOIs, searching for references on the internet from inside the program, and just providing a nice overall front end for dealing with BibTeX files.\nI kept using my MultiMarkdown + LaTeX output system throughout my second master’s degree, and my references.bib file and PDF database slowly grew. R Markdown hadn’t been invented yet and I still hadn’t discovered pandoc, so living in a mostly LaTeX-based world was fine.\nWhen I started my PhD in 2012, something revolutionary happened: the {knitr} package was invented. The new R Markdown format let you to mix R code with Markdown text and create multiple outputs (HTML, LaTeX, and docx) through pandoc. I abandoned MultiMarkdown and fully converted to pandoc (thanks also in part to Kieran Healy’s Plain Person’s Gide to Plain Text Social Science). Since 2012, I’ve written exclusively in pandoc-flavored Markdown and always make sure that I can convert everything to PDF, HTML, and Word (see the “Manuscript” entry in the navigation bar here, for instance, where you can download the preprint version of that paper in a ton of different formats). I recently converted a bunch of my output templates to Quarto pandoc too.\nDuring all this time, I didn’t really keep up with other reference managers. I used super early Zotero as an undergrad back in 2006–2008, but it didn’t fit well with my Markdown-based workflow, so I kind of ignored it. I picked it up again briefly at the beginning of my PhD, but I couldn’t get it to play nicely with R Markdown and pandoc, so I kept using trusty old BibDesk. My references.bib file got bigger and bigger as I took more and more doctoral classes and did more research, but BibDesk handled the growing library just fine. As of today, I’ve got 1,400 items in there with nearly 1,000 PDFs, and everything still works great—mostly."
  },
  {
    "objectID": "blog/2023/bibdesk-to-zotero-pandoc/index.html#why-switch-away-from-bibtex-and-bibdesk",
    "href": "blog/2023/bibdesk-to-zotero-pandoc/index.html#why-switch-away-from-bibtex-and-bibdesk",
    "title": "How to migrate from BibDesk to Zotero for pandoc-based writing",
    "section": "Why switch away from BibTeX and BibDesk?",
    "text": "Why switch away from BibTeX and BibDesk?\nBibDesk got me through my dissertation and all my research projects up until now, so why consider switching away to some other system? Over the past few years, as I’ve done more reading on my iPad and worked on more coauthored projects, I’ve run into a few pain points in my citation workflow.\n\nProblem 1: Cross-device reading\nI enjoy reading PDFs on my iPad (particularly in the iAnnotate app), but getting PDFs from BibDesk onto the iPad has always required a bizarre dance:\n\nStore references.bib and the BibDesk-managed folder of PDFs in Dropbox\nUse the References iPad app to open the BibTeX file from Dropbox on the iPad\nUse iAnnotate to navigate Dropbox and find the PDF I want to read\nRead and annotate the PDF in iAnnotate\nSend the finished PDF from iAnnotate back to Dropbox and go back to References to ensure that the annotated PDF updates\n\nI’d often get sick of this convoluted process and just find the PDF on my computer and AirDrop it to my iPad directly, completely circumventing Dropbox. I’d then AirDrop it back to my computer and attach the marked up PDF to the reference in BibDesk. It’s inconvenient, but less inconvenient than bouncing around a bunch of different apps and hoping everything works.\n\n\nProblem 2: Collaboration across many projects with many coauthors\nCollaboration with a single huge references.bib file is impossible. I could share my Dropbox folder with coauthors, but then they’d see all my entries and have access to all my annotated PDFs, which seems like overkill. As I started working with coauthors, I decided to make smaller project-specific .bib files that would be shareable and editable.\nThis is great for project modularity—see how this bibliography.bib file only contains things we cited? But it caused major synchronization problems. If me or a coauthor makes any edits to the project-specific files (adding a DOI to an existing entry, adding a new entry, etc.), those changes don’t show up in my big master references.bib file. I have to remember to copy those changes to the main file, and I never remember. With some recent projects, I’ve actually been copying some entries from previous projects’ .bib files rather than from the big references.bib file. Everything’s diverging and it’s a pain.\n\n\nProblem 3: BibTeX was designed for LaTeX—but just LaTeX\nBibTeX works great with LaTeX. That’s why it was invented in the first place! The fact that things like pandoc work with it is partially a historical accident—.bib files were a convenient and widely used plain text bibliography format, so pandoc and MultiMarkdown used BibTeX for citations.\nBut citations are often more complicated than BibTeX can handle. Consider the LaTeX package biblatex-chicago—in order to be fully compliant with all the intricacies of the Chicago Manual of Style, it has to expand the BibTeX (technically BibLaTeX) format to include fields like entrysubtype for distinguishing between magazine/newspaper articles and journal articles, among dozens of other customizations and tweaks. BibTeX has a limited set of entry types, and anything that’s not one of those types gets shoehorned into the misc type.\nInternally, programs like pandoc that can read BibTeX files convert them into a standard Citation Style Language (CSL) format, which it then uses to format references as Chicago, APA, MLA, or whatever. It would be great to store all my citations in a CSL-compliant format in the first place rather than as a LaTeX-only format that has to be constantly converted on-the-fly when converting to any non-LaTeX output.\n\n\nThe solution: Zotero\nZotero conveniently fixes all these issues:\n\nIt has a synchronization service that works across platforms (including iOS). It can work with Dropbox too if you don’t want to be bound by their file size limit or pay for extra storage, though I ended up paying for storage to (1) support open source software and (2) not have to deal with multiple programs. I’ve been doing the BibDesk → iAnnotate → Dropbox → MacBook → AirDrop dance for too many years—I just want Zotero to handle all the syncing for me.\nIt’s super easy to collaborate with Zotero. You can create shared group libraries with different sets of coauthors and not worry about Dropbox synchronization issues or accidental deletion of } characters in the .bib file. For one of my reading-intensive class, I’ve even created a shared Zotero group library that all the students can join and cite from, which is neat.\nIt’s also far easier to maintain a master list of references. You can create a Zotero collection for specific projects, and items can live in multiple collections. Editing an item in one collection updates that item in all other collections. Zotero treats collections like iTunes/Apple Music playlists—just like songs can belong to multiple playlists, bibliographic entries can belong to multiple collections.\nZotero follows the CSL standard that pandoc uses. It was the first program to adopt CSL (way back in 2006!). It supports all kinds of entry types and fields, beyond what BibTeX supports."
  },
  {
    "objectID": "blog/2023/bibdesk-to-zotero-pandoc/index.html#preparing-for-the-migration",
    "href": "blog/2023/bibdesk-to-zotero-pandoc/index.html#preparing-for-the-migration",
    "title": "How to migrate from BibDesk to Zotero for pandoc-based writing",
    "section": "Preparing for the migration",
    "text": "Preparing for the migration\nMigrating my big .references.bib file to Zotero was a relatively straightforward process, but it required a few minor shenanigans to get everything working right.\n\nMake a backup\nPreparing everything for migration meant I had to make a ton of edits to the original references.bib file, so I made a copy of it first and worked with the copy.\n\n\nInstall extensions\nTo make Zotero work nicely with a pandoc-centric writing workflow, and to make file management and tag management easier, I installed these three extensions:\n\nBetter BibTeX\nZotFile\nZotero Tag\n\n\n\nRatings and read status\nBibDesk allows you to add a couple extra metadata fields to entries for ratings and to mark them as read. I’ve used these fields for years and find them super useful for keeping track of how much I like articles and for remembering which ones I’ve actually finished.\nInternally, BibDesk stores this data as entries in the raw BibTex:\n@article{the_citekey_for_this_entry,\n    author = {Whoever},\n    title = {Whatever},\n    ...\n    rating = {4},\n    read = {1}}\nI decided to treat these as Zotero tags, which BibDesk calls keywords. I considered making some sort of programmatic solution and writing a script to convert all the rating and read fields to keywords, but that seemed like too much work—many entries have existing keywords and parsing the file and concatenating ratings and read status to the list of keywords would be hard.\nSo instead I sorted all my entries in BibDesk by rating, selected all the 5 star ones and added a zzzzz tag, selected all the 4 star ones and added a zzzz tag, and so on (so that 1 star entries got a z) tag. I then sorted the entries by read status and assigned xxx to all the ones I’ve read. These tag names were just temporary—in Zotero I changed these to emojis (⭐️⭐️⭐️ and ✅), but because I was worried about transferring complex Unicode characters like emojis across programs, I decided to simplify things by temporarily just using ASCII characters.\n\n\nFiles\nI wanted all the PDFs that Zotero would manage to have nice predictable filenames. In BibDesk, I used this pattern. That’s been fine, but it uses spaces in the file name and doesn’t remove any punctuation or special characters, so it was a little trickier to work with in the terminal or with scripts or for easy consistent searching (especially when searching in the iPad Dropbox app when looking for a PDF to read). But because I set up that pattern in 2008, path dependency kind of locked me in and I’ve been unwilling to change it since.\nSince I’m starting with a whole new reference manager, I figured it was time to adopt a better PDF naming system. In the ZotFile preferences, I set this pattern:\n{%a-}{%y-}{%t}\n…which translates to\nup_to_three_last_names-year-first_few_characters_of_title.pdf\n\n\nCitekeys\nIn BibDesk, I’ve had a citation key pattern that I’ve used for years: Lastname:Year, with up to three last names for coauthored things, and an incremental lowercase letter in the case of duplicates:\nHeissKelley:2017\nHeissKelley:2017a\nImbens:2021\nLundbergJohnsonStewart:2021\nZotero and Better BibTeX preserve citekeys when you import a .bib file, but I wanted to make sure I keep using this system for new items I add going forward, so I changed the Better BibTeX preferences to use the same pattern:\nauth(0,1) + auth(0,2) + auth(0,3) + \":\" + year"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "writing\n\n\nmarkdown\n\n\ncitations\n\n\n\n\nTips, tricks, and rationale for converting from a single big BibTeX file to a Zotero database\n\n\n\n\n\n\nJanuary 8, 2023\n\n\nEdifofon Akpan\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/index.html#section-1",
    "href": "blog/index.html#section-1",
    "title": "Blog",
    "section": "2022",
    "text": "2022\n\n\n\n\n  \n\n\n\n\nModeling outcomes with many zeros using Bayesian hurdle lognormal and Gaussian regression\n\n\n\n\n\n\n\nwriting\n\n\nmarkdown\n\n\ncitations\n\n\n\n\nCreate, manipulate, analyze, interpret, and plot Bayesian hurdle regression models in R\n\n\n\n\n\n\nMay 9, 2022\n\n\nEdifofon Akpan\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/index.html",
    "href": "cv/index.html",
    "title": "Curriculum vitæ",
    "section": "",
    "text": "Download current CV"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hello there!",
    "section": "",
    "text": "I am a Research Fellow in the Health Economics Unit at the Centre for Health Policy, Melbourne School of Population and Global Health. I also serve as strategy advisor with Helpman Development Institute, Abuja, Nigeria. In 2021, I completed a Master’s in Public Health University of Melbourne, Australia, with specialization in Health Economics. This September, I will be joining University of Sheffield Four-year Wellcome PhD studentships in Public Health Economics and Decision Science.\nMy previous work focused on health expenditure studies, healthcare utilization surveys, and other analysis to inform public financing of health in Nigeria. I have recently provided support for health economic analyses and training in Malaysia, Papua New Guinea, and Bangladesh. My current interests include applying methods in cost-effectiveness analysis using individual-level data, healthcare decision modelling, and economic evaluation using infectious disease models to inform decision making on health interventions in developing countries.\nI teach introductory classes on use of R and the tidyverse."
  }
]